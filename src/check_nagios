#!/usr/bin/perl -w
#
# Probe for checking Nagios status
# Copyright (c) 2017 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;
use JSON; 
use LWP::UserAgent;
use Nagios::Plugin;
use GridMon::Nagios qw(nagios_debug);
use No::Worries::Syslog qw(syslog_open);

$SIG{__WARN__} = \&No::Worries::Warn::handler;
$SIG{__DIE__}  = \&No::Worries::Die::handler;

syslog_open(ident => "check_nagios", facility => "user");
nagios_debug("started");

# Standard variables used in Nagios::Plugin constructor
my $PROGNAME = 'check_nagios';
my $VERSION = '1.0';
my $DESCRIPTION = 'Probe for checking Nagios status.';
my $EXTRA_DESC = "";
my $LICENSE = 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2017 Emir Imamagic';
my $SHORTNAME = 'check_nagios';

# Crypt-SSLeay cancels alarm so we need to store it
sub safeHTTPSCall {
    my $ua = shift;
    my $req = shift;

    my $remainingTime = alarm(0);
    my $timeNow = time();

    my $res = $ua->request($req);

    $remainingTime = $remainingTime - (time() - $timeNow);
    $remainingTime = 1 if ($remainingTime <= 0);
    alarm($remainingTime);

    return $res;
}

sub getDataNagios {
    my $ua = shift;
    my $url = shift;
    
    my $req = HTTP::Request->new(GET => $url);
    my $res = safeHTTPSCall($ua, $req);
    # Remote Nagios is unreachable
    if (!$res->is_success) {
        return (UNKNOWN, "Could not get results from Nagios URL $url: ".$res->status_line);
    }
    return (OK, $res->content);
}

# Create Nagios::Plugin instance
my $plugin = Nagios::Plugin->new (usage => "Usage: %s --nagios-host=mon --nagios-service=service1,service2",
                                  shortname => $SHORTNAME,
                                  version => $VERSION,
                                  blurb => $DESCRIPTION,
                                  extra => $EXTRA_DESC,
                                  license => $LICENSE,
                                  plugin  => $PROGNAME);
# Define additional arguments
$plugin->add_arg(
    spec => 'hostname|H=s',
    help => "H|hostname\n   Name or IP address of host to check.\n   (default: localhost)",
    required => 0,
    default => 'localhost'
);
$plugin->add_arg(
    spec => 'port|p=i',
    help => "p|port\n   Port of the service.\n   (default: 443)",
    required => 0,
    default => 443
);
$plugin->add_arg(
    spec => 'url=s',
    help => "url\n   Nagios interface URL.\n   (default: /nagios)",
    required => 0,
    default => '/nagios/cgi-bin',
);
$plugin->add_arg(
    spec => 'capath=s',
    help => "--capath=/location/...\n   Location where CA certificates are stored.\n   (default: /etc/grid-security/certificates)",
    required => 0,
    default => '/etc/grid-security/certificates'
);
$plugin->add_arg(
    spec => 'cert=s',
    help => "--cert=/location/...\n   Location of certificate used for authentication.\n",
    required => 0
);
$plugin->add_arg(
    spec => 'key=s',
    help => "--key=/location/...\n   Location of key used for authentication.\n",
    required => 0
);
$plugin->add_arg(
    spec => 'username=s',
    help => "--username\n   Username used for authentication.\n",
    required => 0
);
$plugin->add_arg(
    spec => 'password=s',
    help => "password\n   Password used for authentication.\n",
    required => 0
);
$plugin->add_arg(
    spec => 'realm=s',
    help => "realm\n   Realm used for authentication.\n",
    required => 0,
    default => 'Nagios API'
);
$plugin->add_arg(
    spec => 'nagios-host=s',
    help => "--nagios-host=hostname\n   Hostname on remote nagios to check.\n",
    required => 0
);
$plugin->add_arg(
    spec => 'nagios-service=s',
    help => "--nagios-service=service1,service2\n   List of services on remote nagios to check.\n",
    required => 1
);
$plugin->add_arg(
    spec => 'age=i',
    help => "age\n   Raise CRITICAL if last check is older than age in seconds.\n   (default: 3600)",
    required => 0,
    default => 3600
);
$plugin->add_arg(
    spec => 'ignore-state',
    help => "ignore-state\n   Ignore state of services, just check freshness.\n   (default: )",
    required => 0,
);


$plugin->getopts;

# Signal handler - TERM
local $SIG{ALRM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Timeout occured.");
};

local $SIG{TERM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Plugin received TERM signal.");
};

my @services = split(',', $plugin->opts->get('nagios-service'));
my $nagios = $plugin->opts->hostname;
my $host = $plugin->opts->get('nagios-host') || $nagios;
my $answer = '';
my $state;
my $jsonRef;
my $ua;
my $url = 'https://'.$nagios.':'.$plugin->opts->port.$plugin->opts->url.'/statusjson.cgi?query=service&hostname='.$host.'&servicedescription=';

alarm($plugin->opts->timeout);

if ( $plugin->opts->cert && $plugin->opts->key ) {
    $ua = LWP::UserAgent->new(ssl_opts => { SSL_key_file => $plugin->opts->key, SSL_cert_file => $plugin->opts->cert });
} else {
    $ua = LWP::UserAgent->new();
}
if ( $plugin->opts->username && $plugin->opts->password ) {
    $ua->credentials("$nagios:443", $plugin->opts->realm, $plugin->opts->username, $plugin->opts->password);
}
$ua->agent("check_nagios");

foreach my $service (@services) {
    my $content;
    ($state, $content) = getDataNagios($ua, $url.$service);
    if ($state != OK) {
        $answer .= $content;
        last;
    }
    eval {
        $jsonRef = from_json($content);
    };
    if ($@) {
        $answer .= "Error parsing JSON response from Nagios $nagios: " .$@;
        $state = CRITICAL;
        last;
    } else {
        if ($jsonRef && ref $jsonRef eq "HASH") {
            if (exists $jsonRef->{result} && 
                exists $jsonRef->{result}->{type_code} && 
                $jsonRef->{result}->{type_code} eq 0 ) {
                if (exists $jsonRef->{data} && 
                    exists $jsonRef->{data}->{service}) {
                    my $service = $jsonRef->{data}->{service};
                    if (!$plugin->opts->get('ignore-state') && $service->{status} ne 2) {
                        $answer .= "Service $host/".$service->{description}." on Nagios $nagios has non-OK status: ".$service->{plugin_output}."\n".$service->{long_plugin_output};
                        $state = CRITICAL;
                        last;
                    } else {
                        my $diff = time() - $service->{last_check}/1000;
                        if ($diff > $plugin->opts->age) {
                            $answer .= "Service $host/".$service->{description}." on Nagios $nagios is older than ".$plugin->opts->age." seconds, last check was $diff seconds ago.";
                            $state = CRITICAL;
                            last;
                        } else {
                            $answer .= "Service $host/".$service->{description}." on Nagios $nagios has OK status.\n";
                            $state = OK;
                        }
                    }
                } else {
                    $answer .= "Nagios $nagios JSON response malformed: $content";
                    $state = UNKNOWN;
                    last;
                }
            } else {
                $answer .= "Nagios $nagios JSON response unsuccessful: ".$jsonRef->{result}->{type_text}.". ".$jsonRef->{result}->{message};
                $state = UNKNOWN;
                last;
            }
        } else {
            $answer .= "Nagios $nagios JSON response malformed: $content";
            $state = UNKNOWN;
            last;
        }
    }
}
    
alarm(0);

$plugin->nagios_exit($state, $answer);

